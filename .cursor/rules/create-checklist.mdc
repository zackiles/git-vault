---
description:
globs:
alwaysApply: false
---
# Task: Write an Implementation Checklist at `<project-root>/docs/<name-of-todo>-checklist.md`
You will review the shown or mentioned TODO from [TODO.md](mdc:TODO.md) and follow these steps to create an implementation checklist:

1) **Prepare and Understand**: Review the TODO, and the user-facing [README.md](mdc:README.md), and the documentation on testing in [test/README.md](mdc:test/README.md) to gather the information needed to fully implement and test the TODO.

2) **Read the Code**: Analyze the full and complete code involved and their dependencies to build a deep, accurate, and precise understanding of all the code and tests involved with the TODO and the code needed to implement the TODO.

3) Create an implementation checklist by creating a markdown file in `<project-root>/docs/<name-of-todo>-checklist.md` that contains: the current date and time, summary of the intended change, and a numbered and ordered set of the high-level phases of implementation for the TODO, along with each phases individually numbered steps to complete the phase. Phases should include a general description of that unique phase. Steps should include a markdown checkbox to indicate if it's complete or not. The markdown file will include an appendix section with pseudo code samples or importent references. The markdown final will end with a Summary section providing the high-level and overall objective of the TODO in a few sentences, along with instructions for the reader to follow each phase in order, and mark steps complete or not after moving on to a next phase. The summary should also explain that after the reader compeltes each phase, they MUST run the tests to validate they completed the phase before moving on to the next phase. The reader should know they can choose to write tests for the new features in TODO either: a) at the end once all phases are complete, OR, b) after each phase. The reader should choose a or b based on what makes the most sense given the TODO

4) After the implementation checklist is complete, end your turn by responding to the user with only the path or link to the checklist you created for their review. Do NOT respond with the full markdown file in the chat.

## Example Of Phase and Step Sections
A hypothetical example of a general template specifcally for the phases and steps.

```md
### 1) Refactor Utilities
Refactor and consolidate shared utilities from `old-codebase/src/helpers/`, `old-codebase/src/common/`, and `old-codebase/src/utils/` into a unified `new-codebase/src/shared/` directory for Deno 2.

#### 1.1) Identify Duplicate Logic
- [ ] Audit files in `old-codebase/src/helpers`, `old-codebase/src/common`, and `old-codebase/src/utils`
- [ ] Highlight overlap in functionality
- [ ] Propose which file should be canonical source for Deno 2 port

#### 1.2) Migrate and Delete Duplicates
- [ ] Move canonical utilities to `new-codebase/src/shared/`
- [ ] Convert CommonJS/Node idioms to ES module Deno-compatible syntax
- [ ] Update imports in migrated files using Deno-compatible `import` paths
- [ ] Remove deprecated or obsolete utility files in old codebase

### 2) Replace HTTP Client Library
Swap `axios` from `old-codebase` with Deno-native `fetch` in `new-codebase` to reduce external dependencies and simplify networking.

#### 2.1) Inventory Current Usage
- [ ] List all files in `old-codebase` importing or requiring `axios`
- [ ] Identify patterns such as `axios.create`, interceptors, or custom headers

#### 2.2) Replace API Calls
- [ ] Replace GET requests with native `fetch`
```

- Main phases have short descriptions of the phase
- Phases are numbered in order of when they should be implemented
- Steps are specific, technical, and concise
- Steps are numbered in order of when they should be implemented within their given phase
- Steps include checkboxes

## Summary

Following these steps will ensure you write a complete and comprehensive implementation plan that walks an engineer through the step-by-step completion and implementation of the specified TODO. Review your work, double-check code samples are accurate, and always check the full source files of code and test files that the implementation would have to modify to ensure you understand the impacts of changing it.
