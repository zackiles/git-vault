name: Homebrew Tap Release

on:
  workflow_run:
    workflows: ["Release"]
    types:
      - completed
  release:
    types: [published]

jobs:
  update-homebrew-tap:
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event.release }}
    runs-on: ubuntu-latest
    permissions:
      contents: write

    env:
      TAP_REPO: zackiles/homebrew-git-vault
      FORMULA_PATH: Formula/git-vault.rb

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get release info
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Debug: List all releases
          echo "Listing all releases:"
          gh release list

          # Get the latest release with more robust error handling
          RELEASE_INFO=$(gh release list --limit 1 || echo "")
          if [ -z "$RELEASE_INFO" ]; then
            echo "No releases found. Exiting workflow."
            exit 1
          fi

          # Debug: Print release info
          echo "Release Info: $RELEASE_INFO"

          # Get the tag directly from the GitHub CLI
          TAG=$(gh release list --limit 1 --json tagName -q '.[0].tagName')
          echo "TAG=$TAG" >> $GITHUB_OUTPUT
          echo "Extracted TAG: $TAG"
          VERSION="${TAG#v}"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Download release artifacts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir -p dist

          TAG="${{ steps.release.outputs.TAG }}"
          echo "Using TAG: $TAG for downloading artifacts"

          # Check if tag is valid
          if [ -z "$TAG" ]; then
            echo "Error: Empty tag detected. Cannot download release artifacts."
            exit 1
          fi

          # Download the pre-built tar.gz files using the detected tag
          echo "Downloading gv-macos.tar.gz..."
          gh release download "$TAG" -p "gv-macos.tar.gz" -D dist/ || { echo "Failed to download gv-macos.tar.gz"; exit 1; }

          echo "Downloading gv-macos-arm.tar.gz..."
          gh release download "$TAG" -p "gv-macos-arm.tar.gz" -D dist/ || { echo "Failed to download gv-macos-arm.tar.gz"; exit 1; }

          echo "Downloading gv-linux.tar.gz..."
          gh release download "$TAG" -p "gv-linux.tar.gz" -D dist/ || { echo "Failed to download gv-linux.tar.gz"; exit 1; }

          echo "Downloading gv-linux-arm.tar.gz..."
          gh release download "$TAG" -p "gv-linux-arm.tar.gz" -D dist/ || { echo "Failed to download gv-linux-arm.tar.gz"; exit 1; }

          echo "All files downloaded successfully."

          # No need to rename files anymore
          cp dist/gv-macos.tar.gz dist/gv-macos-x86_64.tar.gz
          cp dist/gv-macos-arm.tar.gz dist/gv-macos-arm64.tar.gz
          cp dist/gv-linux.tar.gz dist/gv-linux-x86_64.tar.gz
          cp dist/gv-linux-arm.tar.gz dist/gv-linux-arm64.tar.gz

          echo "All files renamed successfully."

      - name: Compute SHA256 hashes
        id: shasums
        run: |
          MAC_INTEL_SHA=$(shasum -a 256 dist/gv-macos-x86_64.tar.gz | awk '{print $1}')
          MAC_ARM_SHA=$(shasum -a 256 dist/gv-macos-arm64.tar.gz | awk '{print $1}')
          LINUX_SHA=$(shasum -a 256 dist/gv-linux-x86_64.tar.gz | awk '{print $1}')
          LINUX_ARM_SHA=$(shasum -a 256 dist/gv-linux-arm64.tar.gz | awk '{print $1}')
          echo "MAC_INTEL_SHA=$MAC_INTEL_SHA" >> $GITHUB_OUTPUT
          echo "MAC_ARM_SHA=$MAC_ARM_SHA" >> $GITHUB_OUTPUT
          echo "LINUX_SHA=$LINUX_SHA" >> $GITHUB_OUTPUT
          echo "LINUX_ARM_SHA=$LINUX_ARM_SHA" >> $GITHUB_OUTPUT

      - name: Upload tar.gz artifacts to release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG=${{ steps.release.outputs.TAG }}
          gh release upload $TAG dist/gv-macos-x86_64.tar.gz dist/gv-macos-arm64.tar.gz dist/gv-linux-x86_64.tar.gz dist/gv-linux-arm64.tar.gz --clobber

      - name: Checkout homebrew-git-vault tap repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.TAP_REPO }}
          path: tap
          token: ${{ secrets.TAP_REPO_TOKEN }}

      - name: Generate formula
        run: |
          TAG=${{ steps.release.outputs.TAG }}
          VERSION="${TAG#v}"
          mkdir -p tap/Formula
          cat > tap/${{ env.FORMULA_PATH }} << 'EOFORMULA'
          class GitVault < Formula
            desc "Drop-dead simple solution for sharing sensitive things in git repositories"
            homepage "https://github.com/zackiles/git-vault"
            version "${VERSION}"
            license "MIT"

            on_macos do
              if Hardware::CPU.arm?
                url "https://github.com/zackiles/git-vault/releases/download/${TAG}/gv-macos-arm64.tar.gz"
                sha256 "${MAC_ARM_SHA}"
              else
                url "https://github.com/zackiles/git-vault/releases/download/${TAG}/gv-macos-x86_64.tar.gz"
                sha256 "${MAC_INTEL_SHA}"
              end
            end

            on_linux do
              if Hardware::CPU.arm?
                url "https://github.com/zackiles/git-vault/releases/download/${TAG}/gv-linux-arm64.tar.gz"
                sha256 "${LINUX_ARM_SHA}"
              else
                url "https://github.com/zackiles/git-vault/releases/download/${TAG}/gv-linux-x86_64.tar.gz"
                sha256 "${LINUX_SHA}"
              end
            end

            def install
              # Install the appropriate binary based on platform
              if Hardware::CPU.arm?
                if OS.mac?
                  bin.install "gv-aarch64-apple-darwin" => "gv"
                else
                  bin.install "gv-aarch64-unknown-linux-gnu" => "gv"
                end
              else
                if OS.mac?
                  bin.install "gv-x86_64-apple-darwin" => "gv"
                else
                  bin.install "gv-x86_64-unknown-linux-gnu" => "gv"
                end
              end
            end

            test do
              assert_match version.to_s, shell_output("#{bin}/gv --version")
            end
          end
          EOFORMULA
          # Replace with actual values from variables
          sed -i "s/\${VERSION}/$VERSION/g" tap/${{ env.FORMULA_PATH }}
          sed -i "s/\${TAG}/$TAG/g" tap/${{ env.FORMULA_PATH }}
          sed -i "s/\${MAC_ARM_SHA}/${{ steps.shasums.outputs.MAC_ARM_SHA }}/g" tap/${{ env.FORMULA_PATH }}
          sed -i "s/\${MAC_INTEL_SHA}/${{ steps.shasums.outputs.MAC_INTEL_SHA }}/g" tap/${{ env.FORMULA_PATH }}
          sed -i "s/\${LINUX_SHA}/${{ steps.shasums.outputs.LINUX_SHA }}/g" tap/${{ env.FORMULA_PATH }}
          sed -i "s/\${LINUX_ARM_SHA}/${{ steps.shasums.outputs.LINUX_ARM_SHA }}/g" tap/${{ env.FORMULA_PATH }}

      - name: Commit and push updated formula
        env:
          GITHUB_TOKEN: ${{ secrets.TAP_REPO_TOKEN }}
        run: |
          cd tap
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          git add ${{ env.FORMULA_PATH }}
          git commit -m "Update formula for git-vault ${{ steps.release.outputs.TAG }}"
          git push
